@page "/list/{ListId:long}"

@using GestThéLib.Data.Database
@using GestThéLib.Models.Database
@using System.Globalization

@inject DatabaseContext DatabaseContext
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject NotificationService NotificationService

<div class="flex justify-between">
    <RadzenText TextStyle="TextStyle.H6">Détail d'une liste</RadzenText>
    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="keyboard_return" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
        Click="@((args) => ReturnToLists())" @onclick:stopPropagation="true">
    </RadzenButton>
</div>

<div class="my-12 flex justify-center">
    <RadzenStack Orientation="Orientation.Vertical" Gap="20px" JustifyContent="JustifyContent.SpaceBetween" Style="width: 1400px;">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <div>
                <RadzenText TextStyle="TextStyle.H6">Nom</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1">@List.ListName</RadzenText>
            </div>
            <div>
                <RadzenText TextStyle="TextStyle.H6" TextAlign="TextAlign.Center">Date d'ajout</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Center">@List.ListAddDate</RadzenText>
            </div>
            <div>
                <RadzenText TextStyle="TextStyle.H6" TextAlign="TextAlign.End">Dernière modification</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.End">@List.ListModificationDate</RadzenText>
            </div>
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <div>
                <RadzenText TextStyle="TextStyle.H6">Description</RadzenText>
                @if (String.IsNullOrWhiteSpace(List.ListDescription))
                {
                    <RadzenText TextStyle="TextStyle.Body1">/</RadzenText>
                }
                else
                {
                    <RadzenText TextStyle="TextStyle.Body1">@List.ListDescription</RadzenText>
                }
            </div>
            <div class="flex gap-8">
                <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="edit" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" 
                              Click=@(async args => await DialogService.OpenSideAsync<ListModify>($"Modification de la liste {List.ListName}",new Dictionary<string, object>() { { "ListId", List.IdList } }, options: new SideDialogOptions { CloseDialogOnOverlayClick = true, Position = DialogPosition.Right, ShowMask = true, Width = "100%"})) @onclick:stopPropagation="true"></RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="print" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                              @onclick:stopPropagation="true" Click=@(async args => await DialogService.OpenAsync<PrintPDF>("Aperçu avant impression", new Dictionary<string, object>() { {"ListId", List.IdList} }, options: new DialogOptions() { CloseDialogOnOverlayClick = true, Draggable = false, Resizable = false, ShowClose = true, Width = "800px", Height = "90%"}))></RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="download" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" 
                              Click="ExportCSV" @onclick:stopPropagation="true"></RadzenButton>
            </div>
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.SpaceBetween">
            <div class="flex flex-grow w-full justify-between">
                <div>
                    <RadzenText TextStyle="TextStyle.H6">Thés (total: @(TeaList.Count()))</RadzenText>
                </div>
            </div>
            <RadzenDataGrid @ref="TeaDataGrid" AllowFiltering="false" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowColumnResize="true" AllowAlternatingRows="false"
                            AllowSorting="true" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true"
                            Data="@TeaList" TItem="TTea" LogicalFilterOperator="LogicalFilterOperator.And" EmptyText="Aucun thé à afficher.">
                <Columns>
                    @if (List.IdFields.Any(x => x.FieldName == "nom"))
                    {
                        <RadzenDataGridColumn TItem="TTea" Property="TeaName" Title="Nom">
                            <Template Context="tea">
                                @if (tea.TeaIsArchived.Value)
                                {
                                    <span class="rz-color-danger">@tea.TeaName</span>
                                }
                                else
                                {
                                    @tea.TeaName
                                }
                            </Template>
                        </RadzenDataGridColumn>
                    }
                    @if (List.IdFields.Any(x => x.FieldName == "description"))
                    {
                        <RadzenDataGridColumn TItem="TTea" Property="TeaDescription" Title="Description" Frozen="false"></RadzenDataGridColumn>
                    }
                    @if (List.IdFields.Any(x => x.FieldName == "variété"))
                    {
                        <RadzenDataGridColumn TItem="TTea" Property="TVariety.VarietyName" Title="Variété" Filterable="true" Sortable="false">
                            <Template Context="tea">
                                @tea.IdVarietyNavigation.VarietyName
                            </Template>
                        </RadzenDataGridColumn>
                    }
                    @if (List.IdFields.Any(x => x.FieldName == "type"))
                    {
                        <RadzenDataGridColumn TItem="TTea" Property="TType.TypeName" Title="Type" Filterable="true" Sortable="false">
                            <Template Context="tea">
                                @tea.IdTypeNavigation.TypeName
                            </Template>
                        </RadzenDataGridColumn>
                    }
                    @if (List.IdFields.Any(x => x.FieldName == "provenance"))
                    {
                        <RadzenDataGridColumn TItem="TTea" Property="TCountry.CountryName" Title="Pays / Région" Filterable="true" Sortable="false">
                            <Template Context="tea">
                                @if (String.IsNullOrWhiteSpace(tea.IdRegionNavigation.RegionName))
                                {
                                    @($"{tea.IdRegionNavigation.IdCountryNavigation.CountryName}")
                                }
                                else
                                {
                                    @($"{tea.IdRegionNavigation.IdCountryNavigation.CountryName} / {tea.IdRegionNavigation.RegionName}")
                                }
                            </Template>
                        </RadzenDataGridColumn>
                    }
                    @if (List.IdFields.Any(x => x.FieldName == "fournisseur"))
                    {
                        <RadzenDataGridColumn TItem="TTea" Property="TProvider.ProviderName" Title="Fournisseur" Filterable="true" Sortable="false">
                            <Template Context="tea">
                                @($"{tea.IdProviderNavigation.ProviderName}")
                            </Template>
                        </RadzenDataGridColumn>
                    }
                    @if (List.IdFields.Any(x => x.FieldName == "prix"))
                    {
                        <RadzenDataGridColumn TItem="TTea" Property="TeaPrice" Filterable="true" Title="Prix 100g" Width="100px">
                            <Template Context="price">
                                @($"{price.TeaPrice.Value.ToString("C", CultureInfo.CurrentCulture)}")
                            </Template>
                        </RadzenDataGridColumn>
                    }
                    @if (List.IdFields.Any(x => x.FieldName == "quantité"))
                    {
                        <RadzenDataGridColumn TItem="TTea" Property="TeaQuantity" Filterable="true" Title="Quantité" Width="70px">
                            <Template Context="quantity">
                                @quantity.TeaQuantity.Value.ToString("# g")
                            </Template>
                        </RadzenDataGridColumn>
                    }
                    @if (List.IdFields.Any(x => x.FieldName == "année"))
                    {
                        <RadzenDataGridColumn TItem="TTea" Property="TeaYear" Filterable="true" Title="Année" Width="70px"></RadzenDataGridColumn>
                    }
                </Columns>
            </RadzenDataGrid>
        </RadzenStack>
    </RadzenStack>
</div>